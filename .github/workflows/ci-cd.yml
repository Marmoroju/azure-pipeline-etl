name: 2 - CI/CD - Scanners, build e push para o ACR

on:
  # Após ser realizado o provisionamento da infraestrutura, descomente push, branhes e master  
  #push:
    #branches:
      #- master
  workflow_dispatch: # Permite execução manual

permissions:
  id-token: write
  contents: read

jobs:
  scan:
    name: Segurança do código e da imagem
    runs-on: ubuntu-latest
    
    outputs:
      code_safe: ${{ steps.bandit-check.outputs.safe }}

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3
      
      - name: Instalar Bandit e JQ
        run: |
          pip install bandit jq
      
      - name: Scan do código python co Bandit
        id: bandit-check
        run: |
          bandit -r . -ll -f json -o bandit-report.json
          SEVERITY=$(jq '.results[] | select(.issue_severity=="MEDIUM" or .issue_severity=="HIGH")' bandit-report.json)
          if [ -n "$SEVERITY" ]; then
            echo "Vulnerabilidades encontrada no código Python"
            exit 1
          fi
          echo "safe=true" >> $GITHUB_OUTPUT
      
      - name: Instalar Trivy via apt
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Build da imagem para scan
        run: docker build --platform=linux/amd64 -t etl-image:scan . 
      
      - name: Scan com Trivy
        run: | 
          trivy image --severity CRITICAL --exit-code 1 etl-image:scan
    
  
  build:
    name: Build e push da imagem
    runs-on: ubuntu-latest
    needs: scan

    env:
      ACR_NAME: ${{ secrets.ACR_NAME }}
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_REPOSITORY: ${{ secrets.ACR_REPOSITORY }}

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3
      
      - name: Login na Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Login no ACR
        run: az acr login --name $ACR_NAME

     
      - name: Build da imagem Docker
        run: |
          IMAGE_TAG="1.${{ github.run_number }}"
          docker build --platform=linux/amd64 \
            -t $ACR_LOGIN_SERVER/$ACR_REPOSITORY:latest \
            -t $ACR_LOGIN_SERVER/$ACR_REPOSITORY:$IMAGE_TAG .

      - name: Push da imagem para o ACR
        run: |
          IMAGE_TAG="1.${{ github.run_number }}"
          docker push $ACR_LOGIN_SERVER/$ACR_REPOSITORY:latest
          docker push $ACR_LOGIN_SERVER/$ACR_REPOSITORY:$IMAGE_TAG
